/* Given a sequence, print a longest palindromic subsequence of it */

#include <bits/stdc++.h>
using namespace std;
typedef long long ll ; 
int main() 
{
    ll t ; 
	cin>>t;
	for(int i=0;i<t;i++)
	{
	    string s ;
	    cin>>s;
	    ll n=s.length();
	    string dp[n+1][n+1];
	    for(int j=0;j<n;j++)
	        dp[j][j]= s [ j ] ;
	    for(int j=1;j<=n-1;j++)
	    {
	        for(int k=j;k<n;k++)
	        {
	            int x=k-j;
	            if(s[x]==s[ k ])
	            {
	                dp[x][k]=s[x]+dp[x+1][k-1]+s[k];
	            }
	            else if(dp[ x ][k-1].length()<dp[x +1][ k ].length())
	            {
	                dp[x][k]=dp[ x+1 ][k ];
	            }
	            else dp[x][k]=dp[ x ][k-1 ];
	        }
	    }
	   
	    cout << dp [ 0 ] [ n - 1 ] << endl ; 
	}
	return 0;
}

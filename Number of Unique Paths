/******* Given a M X N matrix with your initial position at top-left cell, find the number of possible unique paths to reach the bottom 
right cell of the matrix from the initial position.
Note: Possible moves can be either down or right at any point in time, i.e., we can move to matrix[i+1][j] or matrix[i][j+1] from
matrix[i][j] *******/

int main() 
{
	cin>>t;
	for(int i=0;i<t;i++)
	{
	    cin>>n>>m;
	    int dp[n+1][m+1];
	    memset(dp,0,sizeof(dp));
	    for(int j=0;j<=n;j++)
	    dp[j][0]=1;
	    for(int j=0;j<=m;j++)
	    dp[0][j]=1;
	    for(int j=1;j<=n;j++)
	    {
	        for(int k=1;k<=m;k++)
	        {
	            dp[j][k]=dp[j-1][k]+dp[j][k-1];
	        }
	    }
	    cout<<dp[n-1][m-1]<<endl;
	}
	return 0;
}

/* Given a string str, find length of the longest repeating subseequence such that the two subsequence don’t have same string character at
same position, i.e., any i’th character in the two subsequences shouldn’t have the same index in the original string. */

#include <bits/stdc++.h>
using namespace std;
int main() 
{
	int t, n;
	cin>>t;
	while(t--)
	{
	    cin >> n;
	    string st;
	    cin >> st;
	    int dp [n+1] [n+1] ;
	    for( int i = 0; i <= n; i++ )
	    {
	        dp[i][0] = 0;
	        dp[0][i] = 0;
	    }
	    for( int i = 1; i <= n; i++)
	    {
	        for( int j = 1; j <= n; j++)
	        {
	             if(st[i-1] == st[j-1] && i != j )
	             {
	                 dp[i][j] = dp[i-1][j-1] + 1;
	             }else dp[i][j] = max( dp[i-1][j] , dp[i][j-1] );
	        }
	    }
	    cout << dp[n][n] <<endl ;
	}
	return 0;
}
